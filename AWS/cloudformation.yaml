---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Resources:

  WITBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "witb"
      AttributeDefinitions: 
        - 
          AttributeName: "recordType"
          AttributeType: "S"
        - 
          AttributeName: "identifier"
          AttributeType: "S"
        - 
          AttributeName: "association"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "recordType"
          KeyType: "HASH"
        - 
          AttributeName: "identifier"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "index"
          KeySchema: 
            - 
              AttributeName: "recordType"
              KeyType: "HASH"
            - 
              AttributeName: "association"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: "1"
            WriteCapacityUnits: "1"
      StreamSpecification: 
        StreamViewType: "KEYS_ONLY"


  SocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Description: "Web Socket API"
      DisableSchemaValidation: true
      Name: "WITBSocketAPI"
      ProtocolType: "WEBSOCKET"
      RouteSelectionExpression: "$request.body.action"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketHandler.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketHandler.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SocketApi
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SocketHandler.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      DeploymentId: !Ref Deployment
      ApiId: !Ref SocketApi

  SocketHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./socketHandler
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Role: !GetAtt SocketExecutionRole.Arn
      Environment:
        Variables:
          ENDPOINT: !Join
                - ''
                - - https://
                  - !Ref SocketApi
                  - ".execute-api."
                  - !Ref AWS::Region
                  - ".amazonaws.com/prod/"

  SocketExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - execute-api:ManageConnections
            Resource: !Join
              - '' 
              - - 'arn:aws:execute-api:'
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":"
                - !Ref SocketApi
                - "/prod/*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:DescribeStream
            - dynamodb:ListStreams
            Resource: !Join
              - '' 
              - - 'arn:aws:dynamodb:'
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":"
                - "table/witb/*"
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            Resource: !Join
              - '' 
              - - 'arn:aws:dynamodb:'
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":"
                - "table/witb"

  SocketExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SocketHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref SocketApi
          - "/*/*"
  
  SocketHandlerChangeTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt WITBTable.StreamArn
      FunctionName: !GetAtt SocketHandler.Arn
      MaximumBatchingWindowInSeconds: 0
      MaximumRecordAgeInSeconds: 60
      MaximumRetryAttempts: 3
      ParallelizationFactor: 3
      StartingPosition: LATEST

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: "WITBRESTAPI"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./simple-proxy-api.yaml
      StageName: prod

  RestExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            Resource: !Join
              - '' 
              - - 'arn:aws:dynamodb:'
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":"
                - "table/witb"
          - Effect: Allow
            Action:
            - dynamodb:Query
            Resource: !Join
              - '' 
              - - 'arn:aws:dynamodb:'
                - !Ref AWS::Region
                - ":"
                - !Ref AWS::AccountId
                - ":"
                - "table/witb/index/index"

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RestHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref RestApi
          - "/*/*"

  RestHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: restHandler/
      Handler: lambda.handler
      MemorySize: 1024
      Role: !GetAtt RestExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /{proxy+}
            Method: ANY

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/lambda/home?region="
        - !Ref AWS::Region
        - "#/functions/"
        - !Ref RestHandler

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/apigateway/home?region="
        - !Ref AWS::Region
        - "#/apis/"
        - !Ref RestApi
        - "/stages/prod"

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Join
      - ''
      - - https://
        - !Ref RestApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/prod/"
